@startuml

package Descriptors {
	class WorkflowDescriptor {
		+string id
		+string name
		+string description
		+string version
		+string[] states 
		+EventDescriptor[] eventDescriptors 
		+EventTransitionDescriptor[] eventTransitionDescriptors
	}

	class EventDescriptor {
		+string name
		+Dictionary<string, InputType> inputs
		+InputValidatorDescriptor[] validators
		+EventReducerDescriptor reducer
	}

	class EventTransitionDescriptor {
		+EventDescriptor event
		+string fromState
		+ConditionalTransition[] conditionalTransitions
	}

	class EventReducerDescriptor {
		+type string
		+object[] params
	}

	class ConditionalTransitionDescriptor {
		+string condition
		+object[] params
		+string toState
	}

	class InputValidatorDescriptor {
		+string type 
		+object[] params
		+bool isNegated
	}
}

package Models {
	class StateInfo {
		+string state
		+object stateData
	}

	class EventExecutor {
		+string userId
		+string hierarchy
		+string[] roles
	}

	class EventPayload {
		+int orderNumber
		+string aggregateId
		+string eventName
		+object data
		+EventExecutor eventExecutor
		+DateTime timestamp
	}
}

package Interfaces {
	interface IEventStorage {
		+Task<EventPayload[]> readEventStreamAsync(string aggregateId)
		+Task<EventPayload> writeToEventStreamAsync(string aggregateId, EventPayload payload)
	}

	interface IWorkflowDefinitionLoader {
		+Task<Dictionary<string, WorkflowDescriptor>> loadWorkflows()
	}
}

package StateMachine {
	class EventTranslator {
		+Func getReducerFunction(EventDescriptor eventDescriptor)
	}

	class ValidatiorTranslator {
		+Func getValidatorFunction(InputValidatorDescriptor inputValidatorDescriptor)
		+bool canParse(string type, object value)
	}

	class WorkflowHandler {
		+StateInfo getCurrentState(string aggregateId, string workflowId)
		+StateInfo executeEvent(EventPayload eventPayload, string workflowId)
	}

	WorkflowHandler --* StateCalculator
	WorkflowHandler --* EventValidationExecutor

	class StateDataCalculator {
		+constructor(IEventStorage eventStore, Dictionary<string, WorkflowDescriptor> descriptor)
		+object calculateCurrentStateData(string aggregateId);
		+objcet applyEvent(string aggregateId, EventPayload payload)
	}

	StateDataCalculator --* IEventStorage
	StateDataCalculator -up-* EventTranslator
	StateDataCalculator -right-* WorkflowDefinitionHelper

	class WorkflowDefinitionHelper {
		-Dictionary<string, WorkflowDescriptor> workflowDescriptors

		+EventDescriptor getEventDescriptor(string eventName, string workflowId)
		+ConditionalTransition gatMatchingTransition(string eventName, string workflowId, object calculatedState)
		+bool transitionIsAllowed(string eventName, StateInfo currentState, string workflowId)
	}

	WorkflowDefinitionHelper -up-* IWorkflowDefinitionLoader

	class ParameterTranslator {
		+object getParameterValue(string parameter)
	}

	EventValidationExecutor --* ParameterTranslator

	class StateCalculator {
		+StateInfo getCurrentStateInfo(string aggregateId, string workflowId)
		+StateInfo applyEvent(string aggregateId, string workflowId, EventPayload payload)
	}

	class EventValidationExecutor {
		+ValidationError[] validateEvent(object currentState, EventPayload eventPayload, workflowId)
	}

	EventValidationExecutor --* WorkflowDefinitionHelper
	EventValidationExecutor --* ValidatiorTranslator

	StateCalculator --* WorkflowDefinitionHelper
	StateCalculator --* StateDataCalculator
}

package EventStore {
	class InMemoryEventStorage {

	}

	class EntityFrameworkEventStorage {

	}

	InMemoryEventStorage -up-|> IEventStorage
	EntityFrameworkEventStorage -up-|> IEventStorage
}

package WorkflowStorage {
	class FileWorkflowDefinitionLoader {

	}

	class DatabaseWorkflowDefinitionLoader {

	}

	class WorkflowParser {
		+constructor(string workflowDefinition)
		+WorkflowDescriptor getWorkflowDescriptor()
	}

	FileWorkflowDefinitionLoader -up-|> IWorkflowDefinitionLoader
	DatabaseWorkflowDefinitionLoader -up-|> IWorkflowDefinitionLoader

	FileWorkflowDefinitionLoader -down-* WorkflowParser
	DatabaseWorkflowDefinitionLoader -down-* WorkflowParser
}


@enduml
